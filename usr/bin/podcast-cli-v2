#!/bin/bash

function _print_usage {
    # Print usage
    echo
    echo "Usage: $0 [options]"
    echo
    echo "Options:"
    echo "  -q | --quiet                        Nothing will be print to screen, except errors."
    echo ""
    echo ""
    echo "Help options:"
    echo "  -h | --help                         Print usage."
    echo "    --categories                      Print all show categories."
    echo "    --languages                       Print all show languages."
    echo ""
    echo ""
    echo "Show level options:"
    echo "  --show"
    echo "    --new"
    echo "    --edit"
    echo "    --delete"
    echo "    --list"
    echo "    --id                                Local identifier of the podcast/show. Decided by the user."
    echo "    --title                             Name of the podcast/show."
    echo "    --owner                             Email address of the owner."
    echo "    --author                            Text name(s) of the author(s) of this podcast.This need not be the same as the owner value."
    echo "    --explicit                          Indicates whether the podcast is explicit language or adult content. You can also tag individual episodes with this property for finer-grained control. Values set for this tag at the episode level override any value set at the show level."
    echo "    --url                               Fully-qualified URL of the homepage of your podcast"
    echo "    --picture                           Picture's URL to associate with your podcast/show."
    echo "    --category                          Code of the show category. For a list of all the available categories execute '$0 --help --categories'."
    echo "    --summary                           A plaintext description of the podcast/show."
    echo "    --language                          Code of the main language of the show. For a list of all the available languages execute '$0 --help --languages'."
    echo "    --show-id"
    echo "  How to:"
    echo "      Create a new show:"
    echo "          $0 --show --new --title '[your-title-here]' --owner '[your-owner-here]' --author '[your-author-here]' --url '[your-url-here]' --picture '[your-picture-here]' --category '[your-category-here]' --description '[your-description-here]' --language '[your-language-here]' --explicit 'false'"
    echo "      Create a new explicit show:"
    echo "          $0 --show --new --title '[your-title-here]' --owner '[your-owner-here]' --author '[your-author-here]' --url '[your-url-here]' --picture '[your-picture-here]' --category '[your-category-here]' --description '[your-description-here]' --language '[your-language-here]' --explicit 'true'"
    echo "      Delete a show:"
    echo "          $0 --show --delete --show-id '[your-show-id]'"
    echo "      List all shows:"
    echo "          $0 --show --list"
    echo "      Edit the title (or other tags) of an existing show:"
    echo "          $0 --show --edit --show-id '[your-show-id]' --title '[your-edited-title-here]'"
    echo ""
    echo ""
    echo "Episode level options:"
    echo "  --episode"
    echo "    --show-id                           Identifier of the show's episode."
    echo "    --new"
    echo "    --edit"
    echo "    --delete"
    echo "    --list"
    echo "    --id                                Local identifier of the episode. It is auto-generated."
    echo "    --title                             Title of the podcast episode."
    echo "    --summary                           A plaintext description of the episode."
    echo "    --explicit                          Indicates whether this episode contains explicit language or adult content. If absent, the episode inherits the show-level setting. If present, the value declared here overrides the show-level setting."
    echo "    --publication-datetime              Publication datetime of the episode. [YYYY-MM-DD HH:MM] [example: 2022-02-15 16:00]"
    echo "    --url                               Fully-qualified URL of the episode audio file."
    echo "    --episode-id"
    echo "  How to:"
    echo "      Create a new episode:"
    echo "          $0 --episode --show-id '[your-show-id]' --new --title '[your-title-here]' --summary '[your-description-here]' --publication-datetime '[your-publication-datetime-here]' --url '[your-url-here]' --explicit 'false'"
    echo "      Create a new explicit episode:"
    echo "          $0 --episode --show-id '[your-show-id]' --new --title '[your-title-here]' --summary '[your-description-here]' --publication-datetime '[your-publication-datetime-here]' --url '[your-url-here]' --explicit 'true'"
    echo "      Delete an episode:"
    echo "          $0 --episode --show-id '[your-show-id]' --delete --episode-id '[your-episode-id-here]'"
    echo "      List all episodes:"
    echo "          $0 --episode --show-id '[your-show-id]' --list"
    echo "      Edit the title (or other tags) of an existing episode:"
    echo "          $0 --episode --show-id '[your-show-id]' --edit --episode-id '[your-episode-id-here]' --title '[your-edited-title-here]'"
    echo ""
    echo ""
    echo "Backup options:"
    echo "  --backup"
    echo "      --show-id                           Identifier of the show."
    echo "      --new"
    echo "      --comment"
    echo "      --delete"
    echo "      --list                              Display a list of the created backups with IDs and comments."
    echo "      --restore                           Replace the actual database with the choosen backup."
    echo "      --backup-id"
    echo "  How to:"
    echo "      Create a backup:"
    echo "          $0 --backup --show-id '[your-show-id]' --new"
    echo "      Create a backup with a comment:"
    echo "          $0 --backup --show-id '[your-show-id]' --new --comment '[your-comment]'"
    echo "      Delete a backup:"
    echo "          $0 --backup --show-id '[your-show-id]' --delete --backup-id '[your-backup-id]'"
    echo "      List all backups:"
    echo "          $0 --backup --show-id '[your-show-id]' --list"
    echo "      Restore a backup:"
    echo "          $0 --backup --show-id '[your-show-id]' --restore --backup-id '[your-backup-id]'"
    echo ""
    echo ""
    echo "Feed options:"
    echo "  --feed"
    echo "      --show-id                           Identifier of the show."
    echo "      --format                            Format of export: RSS, Atom."
    echo "      --output                            Specify the path of the file you want to export to."
    echo "  How to:"
    echo "      Generate an RSS feed:"
    echo "          $0 --feed --show-id '[your-show-id]' --format 'RSS' --output '/your/path/to/file.xml'"
    echo "      Generate an Atom feed:"
    echo "          $0 --feed --show-id '[your-show-id]' --format 'Atom' --output '/your/path/to/file.xml'"
}

function _generate_random_alphanumeric_string {
    length="${1}"

    to_return="NULL"

    while [ "${#to_return}" != "${length}" ]
    do
        array=()
        for i in {a..z} {A..Z} {0..9}; do
            array[$RANDOM]=$i
        done
        to_return=$(printf %s ${array[@]::length} $'\n')
    done

    echo "${to_return}"
}

function _is_id_valid {
    id="${1}"

    #regex='^[[:lower:]_][[:lower:][:digit:]_-]{2,}$'
    regex='^[a-zA-Z0-9_.-]+$'

    if [[ ${id} =~ ${regex} ]]
    then 
        echo "true"
    else
        echo "false"
    fi
}

function _is_url_valid {
    url="${1}"

    regex='^(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]\.[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]$'

    if [[ ${url} =~ ${regex} ]]
    then 
        echo "true"
    else
        echo "false"
    fi
}

function _is_email_address_valid {
    email_address="${1}"

    regex='^(([A-Za-z0-9]+((\.|\-|\_|\+)?[A-Za-z0-9]?)*[A-Za-z0-9]+)|[A-Za-z0-9]+)@(([A-Za-z0-9]+)+((\.|\-|\_)?([A-Za-z0-9]+)+)*)+\.([A-Za-z]{2,})+$'

    if [[ ${email_address} =~ ${regex} ]]
    then 
        echo "true"
    else
        echo "false"
    fi
}

function _is_datetime_valid {
    datetime="${1}"

    result=$(date -d "${datetime}" +"%Y-%m-%d %H:%M" > /dev/null 2>&1)

    if [ $? -eq 0 ]
    then
        return 0
    fi

    return 1
}

function _database_insert {
    database_filename="${1}"
    table_name="${2}"
    #columns ('col1', 'col2')
    columns="${3}"
    #values ('value1', 'value2')
    values="${4}"

    sqlite3 "${database_filename}" "INSERT INTO ${table_name} (${columns}) VALUES (${values});"
}

function _get_language_code {
    name_english=${1}

    to_return=$(sqlite3 "${PATH_LOCAL_STORAGE}/databases/system/languages.db" "SELECT 'iso_639-1' FROM languages WHERE name_english='${name_english}';")

    echo "${to_return}"
}

#PATH_LOCAL_STORAGE="/etc/podcast-cli"
PATH_LOCAL_STORAGE="/home/mircocau/git-repos/podcast-cli/etc/podcast-cli"

# Execute getopt on the arguments passed to this program, identified by the special character $@
PARSED_OPTIONS=$(getopt -n "$0" -o h,q --long "help,quiet,languages,categories,show,episode,new,edit,delete,list,backup,restore,feed,id:,show-id:,title:,owner:,author:,explicit:,url:,picture:,category:,summary:,language:,publication-datetime:,format:,output:" -- "$@")

#Bad arguments, something has gone wrong with the getopt command.
if [ $? -ne 0 ];
then
    #_print_error "Bad arguments."
    echo "[ERROR] Something has gone wrong with the getopt command."
    exit 1
fi

# A little magic, necessary when using getopt.
eval set -- "${PARSED_OPTIONS}"

# Initialize array
declare -A OPTIONS_ARRAY
OPTIONS_ARRAY[quiet]='false'
OPTIONS_ARRAY[help]='false'
OPTIONS_ARRAY[categories]='false'
OPTIONS_ARRAY[languages]='false'

OPTIONS_ARRAY[show]='false'
OPTIONS_ARRAY[episode]='false'
OPTIONS_ARRAY[backup]='false'
OPTIONS_ARRAY[feed]='false'

OPTIONS_ARRAY[show-id]=''
OPTIONS_ARRAY[episode-id]=''
OPTIONS_ARRAY[backup-id]=''

OPTIONS_ARRAY[new]='false'
OPTIONS_ARRAY[edit]='false'
OPTIONS_ARRAY[delete]='false'
OPTIONS_ARRAY[list]='false'

OPTIONS_ARRAY[id]=''
OPTIONS_ARRAY[title]=''
OPTIONS_ARRAY[owner]=''
OPTIONS_ARRAY[author]=''
OPTIONS_ARRAY[explicit]='false'
OPTIONS_ARRAY[url]=''
OPTIONS_ARRAY[picture]=''
OPTIONS_ARRAY[category]=''
OPTIONS_ARRAY[summary]=''
OPTIONS_ARRAY[language]=''

OPTIONS_ARRAY[publication-datetime]=''

OPTIONS_ARRAY[comment]=''
OPTIONS_ARRAY[restore]='false'

OPTIONS_ARRAY[format]=''
OPTIONS_ARRAY[output]=''

# Now goes through all the options with a case and using shift to analyse 1 argument at a time.
#$1 identifies the first argument, and when we use shift we discard the first argument, so $2 becomes $1 and goes again through the case.
while true;
do
    case "${1}" in
        -q|--quiet)
            OPTIONS_ARRAY[quiet]='true'
            shift;;
        -h|--help)
            OPTIONS_ARRAY[help]='true'
            shift;;
        --categories)
            OPTIONS_ARRAY[categories]='true'
            shift;;
        --languages)
            OPTIONS_ARRAY[languages]='true'
            shift;;
        --show)
            OPTIONS_ARRAY[show]='true'
            shift;;
        --episode)
            OPTIONS_ARRAY[episode]='true'
            shift;;
        --backup)
            OPTIONS_ARRAY[backup]='true'
            shift;;
        --feed)
            OPTIONS_ARRAY[feed]='true'
            shift;;
        --new)
            OPTIONS_ARRAY[new]='true'
            shift;;
        --edit)
            OPTIONS_ARRAY[edit]='true'
            shift;;
        --delete)
            OPTIONS_ARRAY[delete]='true'
            shift;;
        --list)
            OPTIONS_ARRAY[list]='true'
            shift;;
        --restore)
            OPTIONS_ARRAY[restore]='true'
            shift;;
        --show-id)
            if [ -n "${2}" ]
            then
                OPTIONS_ARRAY[show-id]="${2}"
            fi
            shift 2;;
        --episode-id)
            if [ -n "${2}" ]
            then
                OPTIONS_ARRAY[episode-id]="${2}"
            fi
            shift 2;;
        --backup-id)
            if [ -n "${2}" ]
            then
                OPTIONS_ARRAY[backup-id]="${2}"
            fi
            shift 2;;
        --id)
            if [ -n "${2}" ]
            then
                OPTIONS_ARRAY[id]="${2}"
            fi
            shift 2;;
        --title)
            if [ -n "${2}" ]
            then
                OPTIONS_ARRAY[title]="${2}"
            fi
            shift 2;;
        --owner)
            if [ -n "${2}" ]
            then
                OPTIONS_ARRAY[owner]="${2}"
            fi
            shift 2;;
        --author)
            if [ -n "${2}" ]
            then
                OPTIONS_ARRAY[author]="${2}"
            fi
            shift 2;;
        --explicit)
            if [ -n "${2}" ]
            then
                OPTIONS_ARRAY[explicit]="${2}"
            fi
            shift 2;;
        --url)
            if [ -n "${2}" ]
            then
                OPTIONS_ARRAY[url]="${2}"
            fi
            shift 2;;
        --picture)
            if [ -n "${2}" ]
            then
                OPTIONS_ARRAY[picture]="${2}"
            fi
            shift 2;;
        --category)
            if [ -n "${2}" ]
            then
                OPTIONS_ARRAY[category]="${2}"
            fi
            shift 2;;
        --summary)
            if [ -n "${2}" ]
            then
                OPTIONS_ARRAY[summary]="${2}"
            fi
            shift 2;;
        --language)
            if [ -n "${2}" ]
            then
                OPTIONS_ARRAY[language]="${2}"
            fi
            shift 2;;
        --publication-datetime)
            if [ -n "${2}" ]
            then
                OPTIONS_ARRAY[publication-datetime]="${2}"
            fi
            shift 2;;
        --comment)
            if [ -n "${2}" ]
            then
                OPTIONS_ARRAY[comment]="${2}"
            fi
            shift 2;;
        --restore)
            if [ -n "${2}" ]
            then
                OPTIONS_ARRAY[restore]='true'
            fi
            shift 2;;
        --format)
            if [ -n "${2}" ]
            then
                OPTIONS_ARRAY[format]="${2}"
            fi
            shift 2;;
        --output)
            if [ -n "${2}" ]
            then
                OPTIONS_ARRAY[output]="${2}"
            fi
            shift 2;;
        --)
            shift
            break;;
    esac
done

# Create 'command'
command=""
if [ "${OPTIONS_ARRAY[help]}" == "true" ]; then command+="help"; fi
if [ "${OPTIONS_ARRAY[categories]}" == "true" ]; then command+=".categories"; fi
if [ "${OPTIONS_ARRAY[languages]}" == "true" ]; then command+=".languages"; fi
if [ "${OPTIONS_ARRAY[show]}" == "true" ]; then command+="show"; fi
if [ "${OPTIONS_ARRAY[episode]}" == "true" ]; then command+="episode"; fi
if [ "${OPTIONS_ARRAY[backup]}" == "true" ]; then command+="backup"; fi
if [ "${OPTIONS_ARRAY[feed]}" == "true" ]; then command+="feed"; fi
if [ "${OPTIONS_ARRAY[new]}" == "true" ]; then command+=".new"; fi
if [ "${OPTIONS_ARRAY[edit]}" == "true" ]; then command+=".edit"; fi
if [ "${OPTIONS_ARRAY[delete]}" == "true" ]; then command+=".delete"; fi
if [ "${OPTIONS_ARRAY[list]}" == "true" ]; then command+=".list"; fi
if [ "${OPTIONS_ARRAY[restore]}" == "true" ]; then command+=".restore"; fi

# echo "command: ${command}"

case "${command}" in
    "help")
        _print_usage
        exit 0;
    ;;
    "help.categories")
        echo "List of show categories"
        sqlite3 "${PATH_LOCAL_STORAGE}/databases/system/categories.db" -cmd ".mode column" -cmd ".headers on" -cmd ".width 4 40" "SELECT id AS code, name AS category FROM categories"
        exit 0;
    ;;
    "help.languages")
        echo "List of show languages"
        sqlite3 "${PATH_LOCAL_STORAGE}/databases/system/languages.db" -cmd ".mode column" -cmd ".headers on" -cmd ".width 4 40" "SELECT id AS code, name_english AS language FROM languages"
        exit 0;
    ;;
    "show.new")
        is_error="false"
        if [ "${is_error}" == "false" ]
        then
            declare -a MANDATORY_SHOW_NEW_INDEX_ARRAY=( "id" "title" "owner" "author" "url" "picture" "category" "summary" "language")
            for index in "${MANDATORY_SHOW_NEW_INDEX_ARRAY[@]}"
            do
                if [ -z "${OPTIONS_ARRAY[${index}]}" ] || [ "${OPTIONS_ARRAY[${index}]}" == "" ]
                then
                    echo "${index} is empty"
                    is_error="true"
                fi
            done
        fi

        # Validate 'id'
        if [ "${is_error}" == "false" ]
        then
            if [ "$(_is_id_valid "${OPTIONS_ARRAY[id]}")" == "false" ]
            then
                echo "[ERROR] ID is invalid. Accepted ID contains A-Z, a-z, 0-9, -,_ or . (no whitespaces)."
                is_error="true"
            else
                if [ $(sqlite3 "${PATH_LOCAL_STORAGE}/databases/system/shows.db" "SELECT EXISTS(SELECT 1 FROM shows WHERE id='${OPTIONS_ARRAY[id]}' LIMIT 1);") -ne 0 ]
                then
                    echo "[ERROR] A show with this ID already exist. Choose a different ID."
                    is_error="true"
                fi
            fi
        fi

        if [ "${is_error}" == "false" ]
        then
            declare -a URL_SHOW_NEW_INDEX_ARRAY=( "url" "picture" )
            for index in "${URL_SHOW_NEW_INDEX_ARRAY[@]}"
            do
                if [ "$(_is_url_valid "${OPTIONS_ARRAY[${index}]}")" == "false" ]
                then
                    echo "${index} is not valid"
                    is_error="true"
                fi
            done
        fi

        if [ "${is_error}" == "false" ]
        then
            if [ "$(_is_email_address_valid "${OPTIONS_ARRAY[owner]}")" == "false" ]
            then
                echo "Owner email address is NOT valid"
                is_error="true"
            fi
        fi

        if [ "${is_error}" == "false" ]
        then
            if [ -z "${OPTIONS_ARRAY[explicit]}" ] || [ "${OPTIONS_ARRAY[explicit]}" == "" ] || [ "${OPTIONS_ARRAY[explicit]}" == "true" ]
            then
                OPTIONS_ARRAY[explicit]="true"
            else
                if [ "${OPTIONS_ARRAY[explicit]}" == "false" ]
                then
                    OPTIONS_ARRAY[explicit]="false"
                else
                    echo "[ERROR] Explicit value is NOT valid."
                    is_error="true"
                fi
            fi
        fi

        if [ "${is_error}" == "false" ]
        then
            if [ ! $(sqlite3 "${PATH_LOCAL_STORAGE}/databases/system/categories.db" "SELECT EXISTS(SELECT 1 FROM categories WHERE id='${OPTIONS_ARRAY[category]}' LIMIT 1)") ]
            then
                is_error="true"
            fi
        fi

        if [ "${is_error}" == "false" ]
        then
            if [ ! $(sqlite3 "${PATH_LOCAL_STORAGE}/databases/system/languages.db" "SELECT EXISTS(SELECT 1 FROM languages WHERE id='${OPTIONS_ARRAY[language]}' LIMIT 1)") ]
            then
                is_error="true"
            fi
        fi

        if [ "${is_error}" == "true" ]
        then
            echo "[ERROR] Empty or invalid options."
            exit 1;
        fi

        _database_insert "${PATH_LOCAL_STORAGE}/databases/system/shows.db" "shows" "id,title,owner,author,explicit,url,picture,summary,category,language" "'${OPTIONS_ARRAY[id]}','${OPTIONS_ARRAY[title]}','${OPTIONS_ARRAY[owner]}','${OPTIONS_ARRAY[author]}','${OPTIONS_ARRAY[explicit]}','${OPTIONS_ARRAY[url]}','${OPTIONS_ARRAY[picture]}','${OPTIONS_ARRAY[summary]}','${OPTIONS_ARRAY[category]}','${OPTIONS_ARRAY[language]}'"

        if [ $? -ne 0 ]
        then
            echo "[ERROR] Command failed."
            exit 1
        fi
        # SHOW_NEW_INDEX_ARRAY=( "id" "title" "owner" "author" "url" "picture" "category" "summary" "language" "explicit")
        # columns=""
        # values=""
        # i=0
        # for index in "${SHOW_NEW_INDEX_ARRAY[@]}"
        # do
        #     if [ ${i} -eq 0 ]
        #     then
        #         columns="${index}"
        #         values="'${OPTIONS_ARRAY[${index}]}'"
        #     else
        #         columns+=",${index}"
        #         values+=",'${OPTIONS_ARRAY[${index}]}'"
        #     fi
        #     i=((i+1))
        # done

        # _database_insert "${PATH_LOCAL_STORAGE}/databases/shows/shows.db" "show" "id,title,owner,author," "'${id}','${title}','${owner}','${author}'"

        # if [ $? -ne 0 ]
        # then
        #     echo "[ERROR] Command failed."
        #     exit 1
        # fi
        ;;
    "show.edit")
        is_show="true"
        ;;
    "show.delete")
        is_show="true"
        ;;
    "show.list")
        is_show="true"
        ;;
    "episode.new")
        #is_episode="true"
        is_error="false"
        if [ "${is_error}" == "false" ]
        then
            declare -a MANDATORY_EPISODE_NEW_INDEX_ARRAY=( "show-id" "title" "publication-datetime" "url" )
            for index in "${MANDATORY_EPISODE_NEW_INDEX_ARRAY[@]}"
            do
                if [ -z "${OPTIONS_ARRAY[${index}]}" ] || [ "${OPTIONS_ARRAY[${index}]}" == "" ]
                then
                    echo "${index} is empty"
                    is_error="true"
                fi
            done
        fi

        if [ "${is_error}" == "false" ]
        then
            if [ "$(_is_id_valid "${OPTIONS_ARRAY[show-id]}")" == "false" ]
            then
                echo "[ERROR] ID is invalid. Accepted ID contains A-Z, a-z, 0-9, -,_ or . (no whitespaces)."
                is_error="true"
            else
                if [ $(sqlite3 "${PATH_LOCAL_STORAGE}/databases/system/shows.db" "SELECT EXISTS(SELECT 1 FROM shows WHERE id='${OPTIONS_ARRAY[show-id]}' LIMIT 1);") -eq 0 ]
                then
                    echo "[ERROR] Show ID not found in database."
                    is_error="true"
                fi
            fi
        fi

        if [ "${is_error}" == "false" ]
        then
            if [ "$(_is_url_valid "${OPTIONS_ARRAY[url]}")" == "false" ]
            then
                echo "[ERROR] ${OPTIONS_ARRAY[url]} is not a valid URL."
                is_error="true"
            fi
        fi

        if [ "${is_error}" == "false" ]
        then
            _is_datetime_valid "${OPTIONS_ARRAY[publication-datetime]}"
            if [ $? -ne 0 ]
            then
                echo "[ERROR] ${OPTIONS_ARRAY[publication-datetime]} is not a valid publication datetime."
                is_error="true"
            fi
        fi
        
        if [ "${is_error}" == "false" ]
        then
            if [ -z "${OPTIONS_ARRAY[explicit]}" ] || [ "${OPTIONS_ARRAY[explicit]}" == "" ] || [ "${OPTIONS_ARRAY[explicit]}" == "true" ]
            then
                OPTIONS_ARRAY[explicit]="true"
            else
                if [ "${OPTIONS_ARRAY[explicit]}" == "false" ]
                then
                    OPTIONS_ARRAY[explicit]="false"
                else
                    echo "Explicit value is NOT valid."
                    is_error="true"
                fi
            fi
        fi

        if [ "${is_error}" == "true" ]
        then
            echo "[ERROR] Empty or invalid options."
            exit 1;
        fi

        _database_insert "${PATH_LOCAL_STORAGE}/databases/system/shows.db" "episodes" "id,title,explicit,url,summary,'publication-datetime','show-id'" "'$(_generate_random_alphanumeric_string "16")','${OPTIONS_ARRAY[title]}','${OPTIONS_ARRAY[explicit]}','${OPTIONS_ARRAY[url]}','${OPTIONS_ARRAY[summary]}','${OPTIONS_ARRAY[publication-datetime]}','${OPTIONS_ARRAY[show-id]}'"

        if [ $? -ne 0 ]
        then
            echo "[ERROR] Command failed."
            exit 1
        fi
        ;;
    "episode.edit")
        is_new="true"
        ;;
    "episode.delete")
        is_edit="true"
        ;;
    "episode.list")
        is_edit="true"
        ;;
    "backup.new")
        is_show="true"
        ;;
    "backup.delete")
        is_show="true"
        ;;
    "backup.list")
        is_show="true"
        ;;
    "backup.restore")
        is_show="true"
        ;;
    "feed")
        # is_show="true"
        is_error="false"
        if [ "${is_error}" == "false" ]
        then
            declare -a MANDATORY_FEED_INDEX_ARRAY=( "show-id" "format" "output" )
            for index in "${MANDATORY_EPISODE_NEW_INDEX_ARRAY[@]}"
            do
                if [ -z "${OPTIONS_ARRAY[${index}]}" ] || [ "${OPTIONS_ARRAY[${index}]}" == "" ]
                then
                    echo "${index} is empty"
                    is_error="true"
                fi
            done
        fi

        if [ "${is_error}" == "false" ]
        then
            if [ "$(_is_id_valid "${OPTIONS_ARRAY[show-id]}")" == "false" ]
            then
                echo "[ERROR] ID is invalid. Accepted ID contains A-Z, a-z, 0-9, -,_ or . (no whitespaces)."
                is_error="true"
            else
                if [ $(sqlite3 "${PATH_LOCAL_STORAGE}/databases/system/shows.db" "SELECT EXISTS(SELECT 1 FROM shows WHERE id='${OPTIONS_ARRAY[show-id]}' LIMIT 1);") -eq 0 ]
                then
                    echo "[ERROR] Show ID not found in database."
                    is_error="true"
                fi
            fi
        fi

        case "${OPTIONS_ARRAY[format]}" in
            'RSS')
                show_title="$(sqlite3 "${PATH_LOCAL_STORAGE}/databases/system/shows.db" "SELECT title FROM shows WHERE id='${OPTIONS_ARRAY[show-id]}'")"
                show_url="$(sqlite3 "${PATH_LOCAL_STORAGE}/databases/system/shows.db" "SELECT url FROM shows WHERE id='${OPTIONS_ARRAY[show-id]}'")"
                show_summary="$(sqlite3 "${PATH_LOCAL_STORAGE}/databases/system/shows.db" "SELECT summary FROM shows WHERE id='${OPTIONS_ARRAY[show-id]}'")"
                show_owner="$(sqlite3 "${PATH_LOCAL_STORAGE}/databases/system/shows.db" "SELECT owner FROM shows WHERE id='${OPTIONS_ARRAY[show-id]}'")"
                show_author="$(sqlite3 "${PATH_LOCAL_STORAGE}/databases/system/shows.db" "SELECT author FROM shows WHERE id='${OPTIONS_ARRAY[show-id]}'")"
                if [ "$(sqlite3 "${PATH_LOCAL_STORAGE}/databases/system/shows.db" "SELECT explicit FROM shows WHERE id='${OPTIONS_ARRAY[show-id]}'")" == "true" ]; then explicit="yes"; else explicit="no"; fi
                show_picture="$(sqlite3 "${PATH_LOCAL_STORAGE}/databases/system/shows.db" "SELECT picture FROM shows WHERE id='${OPTIONS_ARRAY[show-id]}'")"
                show_language_english="$(sqlite3 "${PATH_LOCAL_STORAGE}/databases/system/shows.db" "SELECT language FROM shows WHERE id='${OPTIONS_ARRAY[show-id]}'")"
                show_language_code="$(_get_language_code "${show_language_english}")"
                if [ $? -ne 0 ]; then echo "[ERROR] Query DB failed."; exit 1; fi
                last_build_date="$(LANG=en_EN.utf8 date +'%a, %d %b %Y %H:%M:%S %z')"

                echo '<rss xmlns:googleplay="http://www.google.com/schemas/play-podcasts/1.0" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" version="2.0">' > "${OPTIONS_ARRAY[output]}"
                echo '<channel>' >> "${OPTIONS_ARRAY[output]}"
                echo '<title>'"${show_title}"'</title>' >> "${OPTIONS_ARRAY[output]}"
                echo '<link>'"${show_url}"'</link>' >> "${OPTIONS_ARRAY[output]}"
                echo '<description>'"${show_summary}"'</description>' >> "${OPTIONS_ARRAY[output]}"
                echo '<lastBuildDate>'"${last_build_date}"'</lastBuildDate>' >> "${OPTIONS_ARRAY[output]}"
                echo '<itunes:owner>' >> "${OPTIONS_ARRAY[output]}"
                echo '<itunes:email>'"${show_owner}"'</itunes:email>' >> "${OPTIONS_ARRAY[output]}"
                echo '<itunes:name>'"${show_owner}"'</itunes:name>' >> "${OPTIONS_ARRAY[output]}"
                echo '</itunes:owner>' >> "${OPTIONS_ARRAY[output]}"
                echo '<itunes:author>'"${show_author}"'</itunes:author>' >> "${OPTIONS_ARRAY[output]}"
                echo '<itunes:explicit>'"${explicit}"'</itunes:explicit>' >> "${OPTIONS_ARRAY[output]}"
                echo '<itunes:image href="'"${show_picture}"'"/>' >> "${OPTIONS_ARRAY[output]}"
                echo '<itunes:subtitle>'"${show_summary}"'</itunes:subtitle>' >> "${OPTIONS_ARRAY[output]}"
                echo '<itunes:summary>'"${show_summary}"'</itunes:summary>' >> "${OPTIONS_ARRAY[output]}"
                echo '<googleplay:owner>'"${show_owner}"'</googleplay:owner>' >> "${OPTIONS_ARRAY[output]}"
                echo '<googleplay:author>'"${show_author}"'</googleplay:author>' >> "${OPTIONS_ARRAY[output]}"
                echo '<googleplay:image href="'"${show_picture}"'"/>' >> "${OPTIONS_ARRAY[output]}"
                echo '<language>'"${show_language_code}"'</language>' >> "${OPTIONS_ARRAY[output]}"
                for episode_id in $(sqlite3 "${PATH_LOCAL_STORAGE}/databases/system/shows.db" "SELECT id FROM episodes WHERE 'show-id'='${OPTIONS_ARRAY[show-id]}'")
                do
                    episode_title="$(sqlite3 "${PATH_LOCAL_STORAGE}/databases/system/shows.db" "SELECT title FROM episodes WHERE id='${episode_id}'")"
                    episode_publication_datetime="$(sqlite3 "${PATH_LOCAL_STORAGE}/databases/system/shows.db" "SELECT publication-datetime FROM episodes WHERE id='${episode_id}'")"
                    episode_publication_datetime="$(LANG=en_EN.utf8 date -d "${episode_publication_datetime}" +'%a, %d %b %Y %H:%M:%S %z')"
                    episode_summary="$(sqlite3 "${PATH_LOCAL_STORAGE}/databases/system/shows.db" "SELECT summary FROM episodes WHERE id='${episode_id}'")"
                    episode_url="$(sqlite3 "${PATH_LOCAL_STORAGE}/databases/system/shows.db" "SELECT url FROM episodes WHERE id='${episode_id}'")"

                    echo '<item>' >> "${OPTIONS_ARRAY[output]}"
                    echo '<title>'"${episode_title}"'</title>' >> "${OPTIONS_ARRAY[output]}"
                    echo '<pubDate>'"${episode_publication_datetime}"'</pubDate>' >> "${OPTIONS_ARRAY[output]}"
                    echo '<description>'"${episode_summary}"'<description/>' >> "${OPTIONS_ARRAY[output]}"
                    echo '<enclosure url="'"${episode_url}"'" length="" type="audio/ogg"/>' >> "${OPTIONS_ARRAY[output]}"
                    echo '<guid isPermalink="false">'"${episode_id}"'</guid>' >> "${OPTIONS_ARRAY[output]}"
                    echo '</item>' >> "${OPTIONS_ARRAY[output]}"
                done
                echo '</channel>' >> "${OPTIONS_ARRAY[output]}"
                echo '</rss>' >> "${OPTIONS_ARRAY[output]}"
                ;;
            'ATOM')
                OPTIONS_ARRAY[quiet]='true'
                ;;
            --)
                echo "[ERROR] ${OPTIONS_ARRAY[format]} is NOT valid."
                break;;
        esac
        ;;
    *)
        echo "[ERROR] Unknown command."
        _print_usage
        exit 1
        ;;
esac